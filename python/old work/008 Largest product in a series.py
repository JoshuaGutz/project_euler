# 8 Largest product in a series
# Find the thirteen adjacent digits in the 1000-digit number that 
# have the greatest product. What is the value of this product?

def instructions():
    # The four adjacent digits in the 1000-digit number that have the 
    # greatest product are 9 x 9 x 8 x 9 = 5832.

    # 73167176531330624919225119674426574742355349194934
    # 96983520312774506326239578318016984801869478851843
    # 85861560789112949495459501737958331952853208805511
    # 12540698747158523863050715693290963295227443043557
    # 66896648950445244523161731856403098711121722383113
    # 62229893423380308135336276614282806444486645238749
    # 30358907296290491560440772390713810515859307960866
    # 70172427121883998797908792274921901699720888093776
    # 65727333001053367881220235421809751254540594752243
    # 52584907711670556013604839586446706324415722155397
    # 53697817977846174064955149290862569321978468622482
    # 83972241375657056057490261407972968652414535100474
    # 82166370484403199890008895243450658541227588666881
    # 16427171479924442928230863465674813919123162824586
    # 17866458359124566529476545682848912883142607690042
    # 24219022671055626321111109370544217506941658960408
    # 07198403850962455444362981230987879927244284909188
    # 84580156166097919133875499200524063689912560717606
    # 05886116467109405077541002256983155200055935729725
    # 71636269561882670428252483600823257530420752963450
    # Find the thirteen adjacent digits in the 1000-digit number that 
    # have the greatest product. What is the value of this product?
    pass
pass

def build_number():
    # global number
    # row01 = "73167176531330624919225119674426574742355349194934"
    # row02 = "96983520312774506326239578318016984801869478851843"
    # row03 = "85861560789112949495459501737958331952853208805511"
    # row04 = "12540698747158523863050715693290963295227443043557"
    # row05 = "66896648950445244523161731856403098711121722383113"
    # row06 = "62229893423380308135336276614282806444486645238749"
    # row07 = "30358907296290491560440772390713810515859307960866"
    # row08 = "70172427121883998797908792274921901699720888093776"
    # row09 = "65727333001053367881220235421809751254540594752243"
    # row10 = "52584907711670556013604839586446706324415722155397"
    # row11 = "53697817977846174064955149290862569321978468622482"
    # row12 = "83972241375657056057490261407972968652414535100474"
    # row13 = "82166370484403199890008895243450658541227588666881"
    # row14 = "16427171479924442928230863465674813919123162824586"
    # row15 = "17866458359124566529476545682848912883142607690042"
    # row16 = "24219022671055626321111109370544217506941658960408"
    # row17 = "07198403850962455444362981230987879927244284909188"
    # row18 = "84580156166097919133875499200524063689912560717606"
    # row19 = "05886116467109405077541002256983155200055935729725"
    # row20 = "71636269561882670428252483600823257530420752963450"
    # number = [row01, row02, row03, row04, row05, 
              # row06, row07, row08, row09, row10, 
              # row11, row12, row13, row14, row15, 
              # row16, row17, row18, row19, row20]
    pass
pass

def build_number_string():
    global number_string, number_list
    number_string = "73167176531330624919225119674426574742355349194934\
    96983520312774506326239578318016984801869478851843\
    85861560789112949495459501737958331952853208805511\
    12540698747158523863050715693290963295227443043557\
    66896648950445244523161731856403098711121722383113\
    62229893423380308135336276614282806444486645238749\
    30358907296290491560440772390713810515859307960866\
    70172427121883998797908792274921901699720888093776\
    65727333001053367881220235421809751254540594752243\
    52584907711670556013604839586446706324415722155397\
    53697817977846174064955149290862569321978468622482\
    83972241375657056057490261407972968652414535100474\
    82166370484403199890008895243450658541227588666881\
    16427171479924442928230863465674813919123162824586\
    17866458359124566529476545682848912883142607690042\
    24219022671055626321111109370544217506941658960408\
    07198403850962455444362981230987879927244284909188\
    84580156166097919133875499200524063689912560717606\
    05886116467109405077541002256983155200055935729725\
    71636269561882670428252483600823257530420752963450"
    number_string = number_string.replace(" ", "")
    number_list = number_string.split("0")
    for i in range(len(number_list) - 1, -1, -1):
        if len(number_list[i]) < 13:
            number_list.pop(i)
    pass
build_number_string()

print number_list
print len(number_list[0])

# number of iteration products to check = length - 13 + 1

max_product = 1

for number in number_list:
    checks = len(number) - 12
    for i in range(checks):
        product = 1
        for j in number[i: i + 13]:
            j = int(j)
            product *= j
        if max_product < product:
            max_product = product
            print max_product
pass

print "max_product =", max_product

# returns 23514624000