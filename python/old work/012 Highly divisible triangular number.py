# 12 Highly divisible triangular number
from math import sqrt

def instructions():
    # The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    # Let us list the factors of the first seven triangle numbers:
    # 1: 1
    # 3: 1,3
    # 6: 1,2,3,6
    # 10: 1,2,5,10
    # 15: 1,3,5,15
    # 21: 1,3,7,21
    # 28: 1,2,4,7,14,28
    # We can see that 28 is the first triangle number to have over five divisors.
    # What is the value of the first triangle number to have over five hundred divisors?
    pass
pass

def factor(n):
    factors = set()
    for x in range(1, int(sqrt(n)) + 1):
      if n % x == 0:
        factors.add(x)
        factors.add(n//x)
    #for i in (45, 53, 64): print( "%i: factors: %s" % (i, factor(i)) )
    #45: factors: [1, 3, 5, 9, 15, 45]
    #53: factors: [1, 53]
    #64: factors: [1, 2, 4, 8, 16, 32, 64]
    return sorted(factors)

triangular_number = 1
natural_number = 1
number_of_factors = len(factor(triangular_number))

while number_of_factors <= 500:
    print triangular_number, "has", number_of_factors, "factors"
    natural_number += 1
    triangular_number += natural_number
    number_of_factors = len(factor(triangular_number))

print triangular_number, "has", number_of_factors, "factors"

# 76576500 has 576 factors